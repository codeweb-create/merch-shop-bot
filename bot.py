import os
import logging
import openai
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from system_prompt import SYSTEM_PROMPT
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [["‚ÑπÔ∏è –î–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞", "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    user_name = update.message.from_user.first_name or "–î–æ—Ä–æ–≥–æ–π –∫–ª–∏–µ–Ω—Ç"
    await update.message.reply_text(
        f"{user_name}, üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç!\n–í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å.",
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–î–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞"
async def delivery_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üöö –î–æ—Å—Ç–∞–≤–∫–∞\n"
        "- –ö—É—Ä—å–µ—Ä–æ–º (2-3 –¥–Ω—è, 300 ‚ÇΩ)\n"
        "- –°–∞–º–æ–≤—ã–≤–æ–∑ (–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 1)\n"
        "- –î–æ—Å—Ç–∞–≤–∫–∞ –≤ —Ä–µ–≥–∏–æ–Ω—ã ‚Äì —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.\n\n"
        "üí≥ –û–ø–ª–∞—Ç–∞\n"
        "- –ö–∞—Ä—Ç–æ–π –æ–Ω–ª–∞–π–Ω\n"
        "- –ù–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É\n"
        "- –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑–µ."
    )

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç)
async def handle_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message is None:
        return

    user_message = update.message.text or update.message.caption
    user_id = update.message.from_user.id
    
    if not user_message:
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {update.message.to_dict()}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI
    try:
        logging.info(f"‚è≥ –ó–∞–ø—Ä–æ—Å –≤ OpenAI –æ—Ç {user_id}: {user_message}")
        client = openai.OpenAI(api_key=OPENAI_API_KEY)
        
        if "chat_history" not in context.user_data:
            context.user_data["chat_history"] = [{"role": "system", "content": SYSTEM_PROMPT}]
        
        context.user_data["chat_history"].append({"role": "user", "content": user_message})
        
        response = client.chat.completions.create(
            model="gpt-4",
            messages=context.user_data["chat_history"],
            temperature=0.7
        )
        
        reply_text = response.choices[0].message.content.strip() if response.choices else "‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenAI"
        logging.info(f"‚úÖ –û—Ç–≤–µ—Ç OpenAI –¥–ª—è {user_id}: {reply_text}")
        await update.message.reply_text(reply_text)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    print("‚úÖ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")  
    try:
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.Regex("‚ÑπÔ∏è –î–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞"), delivery_info))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_messages))
        application.run_polling()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
